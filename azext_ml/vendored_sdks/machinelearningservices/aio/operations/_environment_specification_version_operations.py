# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EnvironmentSpecificationVersionOperations:
    """EnvironmentSpecificationVersionOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure_machine_learning_workspaces.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def create_or_update(
        self,
        environment_name: str,
        environment_version: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        api_version: Optional[str] = "1.0.0",
        type: Optional[Union[str, "models.EnvironmentSpecificationType"]] = None,
        docker: Optional["models.DockerProperties"] = None,
        python: Optional["models.PythonProperties"] = None,
        runtime: Optional[str] = None,
        r_install: Optional[str] = None,
        spark_maven_pom: Optional[str] = None,
        datastore_id: Optional[str] = None,
        asset_path: Optional["models.AssetPath"] = None,
        linked_resource_ids: Optional[Dict[str, List[str]]] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ) -> "models.EnvironmentSpecificationVersionResource":
        """create_or_update.

        :param environment_name:
        :type environment_name: str
        :param environment_version:
        :type environment_version: str
        :param subscription_id:
        :type subscription_id: str
        :param resource_group_name:
        :type resource_group_name: str
        :param workspace_name:
        :type workspace_name: str
        :param api_version: Api Version.
        :type api_version: str
        :param type: Environment specification is either user managed or curated by the Azure ML
         service


         .. raw:: html

            <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-
         environments" />.
        :type type: str or ~azure_machine_learning_workspaces.models.EnvironmentSpecificationType
        :param docker: Class to represent configuration settings for Docker.
        :type docker: ~azure_machine_learning_workspaces.models.DockerProperties
        :param python: Class to represent configuration settings for Python and Conda.
        :type python: ~azure_machine_learning_workspaces.models.PythonProperties
        :param runtime: Specifies the version of the runtime (e.g the version of Python or R snapshot)


         .. raw:: html

            <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#runtime-txt-
         specifying-runtimes" />.
        :type runtime: str
        :param r_install: Used to install R libraries pinned to a specific snapshot on MRAN

         :code:`<see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#install-r-
         install-an-r-rstudio-environment" />`:code:`<seealso
         href="https://mran.microsoft.com/documents/rro/reproducibility" />`.
        :type r_install: str
        :param spark_maven_pom: Spark Maven project object model file used to specify dependencies


         .. raw:: html

            <see href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html" />.
        :type spark_maven_pom: str
        :param datastore_id: The asset datastoreId.
        :type datastore_id: str
        :param asset_path: Details of an AssetUri.
        :type asset_path: ~azure_machine_learning_workspaces.models.AssetPath
        :param linked_resource_ids: Associated ARM resources. Key is the link type, value is a list of
         ARM IDs.
        :type linked_resource_ids: dict[str, list[str]]
        :param description: The asset description text.
        :type description: str
        :param tags: Tag dictionary. Tags can be added, removed, and updated.
        :type tags: dict[str, str]
        :param properties: The asset property dictionary.
        :type properties: dict[str, str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EnvironmentSpecificationVersionResource, or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.EnvironmentSpecificationVersionResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.EnvironmentSpecificationVersionResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.EnvironmentSpecificationVersion(type=type, docker=docker, python=python, runtime=runtime, r_install=r_install, spark_maven_pom=spark_maven_pom, datastore_id=datastore_id, asset_path=asset_path, linked_resource_ids=linked_resource_ids, description=description, tags=tags, properties=properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update.metadata['url']  # type: ignore
        path_format_arguments = {
            'environmentName': self._serialize.url("environment_name", environment_name, 'str'),
            'environmentVersion': self._serialize.url("environment_version", environment_version, 'str'),
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if body is not None:
            body_content = self._serialize.body(body, 'EnvironmentSpecificationVersion')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('EnvironmentSpecificationVersionResource', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('EnvironmentSpecificationVersionResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/environments/{environmentName}/versions/{environmentVersion}'}  # type: ignore

    async def get(
        self,
        environment_name: str,
        environment_version: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        api_version: Optional[str] = "1.0.0",
        **kwargs
    ) -> "models.EnvironmentSpecificationVersionResource":
        """get.

        :param environment_name:
        :type environment_name: str
        :param environment_version:
        :type environment_version: str
        :param subscription_id:
        :type subscription_id: str
        :param resource_group_name:
        :type resource_group_name: str
        :param workspace_name:
        :type workspace_name: str
        :param api_version: Api Version.
        :type api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EnvironmentSpecificationVersionResource, or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.EnvironmentSpecificationVersionResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.EnvironmentSpecificationVersionResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'environmentName': self._serialize.url("environment_name", environment_name, 'str'),
            'environmentVersion': self._serialize.url("environment_version", environment_version, 'str'),
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('EnvironmentSpecificationVersionResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/environments/{environmentName}/versions/{environmentVersion}'}  # type: ignore

    async def delete(
        self,
        environment_name: str,
        environment_version: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        api_version: Optional[str] = "1.0.0",
        **kwargs
    ) -> None:
        """delete.

        :param environment_name:
        :type environment_name: str
        :param environment_version:
        :type environment_version: str
        :param subscription_id:
        :type subscription_id: str
        :param resource_group_name:
        :type resource_group_name: str
        :param workspace_name:
        :type workspace_name: str
        :param api_version: Api Version.
        :type api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'environmentName': self._serialize.url("environment_name", environment_name, 'str'),
            'environmentVersion': self._serialize.url("environment_version", environment_version, 'str'),
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/environments/{environmentName}/versions/{environmentVersion}'}  # type: ignore

    def list(
        self,
        environment_name: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        api_version: Optional[str] = "1.0.0",
        orderby: Optional[str] = None,
        top: Optional[str] = None,
        skip_token: Optional[str] = None,
        **kwargs
    ) -> AsyncIterable["models.EnvironmentSpecificationVersionResourceArmPaginatedResult"]:
        """list.

        :param environment_name:
        :type environment_name: str
        :param subscription_id:
        :type subscription_id: str
        :param resource_group_name:
        :type resource_group_name: str
        :param workspace_name:
        :type workspace_name: str
        :param api_version: Api Version.
        :type api_version: str
        :param orderby:
        :type orderby: str
        :param top:
        :type top: str
        :param skip_token:
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either EnvironmentSpecificationVersionResourceArmPaginatedResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure_machine_learning_workspaces.models.EnvironmentSpecificationVersionResourceArmPaginatedResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.EnvironmentSpecificationVersionResourceArmPaginatedResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'environmentName': self._serialize.url("environment_name", environment_name, 'str'),
                    'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if api_version is not None:
                    query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, 'str')
                if top is not None:
                    query_parameters['$top'] = self._serialize.query("top", top, 'str')
                if skip_token is not None:
                    query_parameters['$skipToken'] = self._serialize.query("skip_token", skip_token, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('EnvironmentSpecificationVersionResourceArmPaginatedResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/environments/{environmentName}/versions'}  # type: ignore
