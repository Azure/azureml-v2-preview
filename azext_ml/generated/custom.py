# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def ml_endpoint_list(client,
                     subscription_id,
                     resource_group_name,
                     workspace_name,
                     skip_token=None):
    return client.list(skip_token=skip_token,
                       subscription_id=subscription_id,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def ml_endpoint_show(client,
                     name,
                     subscription_id,
                     resource_group_name,
                     workspace_name):
    return client.get(name=name,
                      subscription_id=subscription_id,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def ml_endpoint_create(client,
                       name,
                       subscription_id,
                       resource_group_name,
                       workspace_name,
                       system_data=None,
                       description=None,
                       properties=None,
                       traffic_rules=None,
                       compute_configuration=None,
                       auth_mode=None,
                       keys=None):
    return client.create_or_update(name=name,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   system_data=system_data,
                                   description=description,
                                   properties=properties,
                                   traffic_rules=traffic_rules,
                                   compute_configuration=compute_configuration,
                                   auth_mode=auth_mode,
                                   keys=keys)


def ml_endpoint_update(client,
                       name,
                       subscription_id,
                       resource_group_name,
                       workspace_name,
                       system_data=None,
                       description=None,
                       properties=None,
                       traffic_rules=None,
                       compute_configuration=None,
                       auth_mode=None,
                       keys=None):
    return client.create_or_update(name=name,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   system_data=system_data,
                                   description=description,
                                   properties=properties,
                                   traffic_rules=traffic_rules,
                                   compute_configuration=compute_configuration,
                                   auth_mode=auth_mode,
                                   keys=keys)


def ml_endpoint_delete(client,
                       name,
                       subscription_id,
                       resource_group_name,
                       workspace_name):
    return client.delete(name=name,
                         subscription_id=subscription_id,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def ml_endpoint_list_key(client,
                         name,
                         subscription_id,
                         resource_group_name,
                         workspace_name):
    return client.list_key(name=name,
                           subscription_id=subscription_id,
                           resource_group_name=resource_group_name,
                           workspace_name=workspace_name)


def ml_datastore_list(client,
                      subscription_id,
                      resource_group_name,
                      workspace_name,
                      skip_token=None,
                      count=None,
                      is_default=None,
                      names=None,
                      search_text=None,
                      order_by=None,
                      order_by_asc=None):
    if count is None:
        count = 30
    if order_by_asc is None:
        order_by_asc = False
    return client.list(skip_token=skip_token,
                       count=count,
                       is_default=is_default,
                       names=names,
                       search_text=search_text,
                       order_by=order_by,
                       order_by_asc=order_by_asc,
                       subscription_id=subscription_id,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def ml_datastore_show(client,
                      name,
                      subscription_id,
                      resource_group_name,
                      workspace_name):
    return client.get(name=name,
                      subscription_id=subscription_id,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def ml_datastore_create(client,
                        name,
                        subscription_id,
                        resource_group_name,
                        workspace_name,
                        contents,
                        system_data=None,
                        is_default=None,
                        linked_info=None,
                        properties=None,
                        description=None,
                        tags=None):
    return client.create_or_update(name=name,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   system_data=system_data,
                                   contents=contents,
                                   is_default=is_default,
                                   linked_info=linked_info,
                                   properties=properties,
                                   description=description,
                                   tags=tags)


def ml_datastore_update(client,
                        name,
                        subscription_id,
                        resource_group_name,
                        workspace_name,
                        contents,
                        system_data=None,
                        is_default=None,
                        linked_info=None,
                        properties=None,
                        description=None,
                        tags=None):
    return client.create_or_update(name=name,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   system_data=system_data,
                                   contents=contents,
                                   is_default=is_default,
                                   linked_info=linked_info,
                                   properties=properties,
                                   description=description,
                                   tags=tags)


def ml_datastore_delete(client,
                        name,
                        subscription_id,
                        resource_group_name,
                        workspace_name):
    return client.delete(name=name,
                         subscription_id=subscription_id,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def ml_datastore_list_secret(client,
                             name,
                             subscription_id,
                             resource_group_name,
                             workspace_name):
    return client.list_secret(name=name,
                              subscription_id=subscription_id,
                              resource_group_name=resource_group_name,
                              workspace_name=workspace_name)


def ml_job_list(client,
                subscription_id,
                resource_group_name,
                workspace_name,
                skip_token=None):
    return client.list(skip_token=skip_token,
                       subscription_id=subscription_id,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def ml_job_show(client,
                id_,
                subscription_id,
                resource_group_name,
                workspace_name):
    return client.get(id=id_,
                      subscription_id=subscription_id,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def ml_job_create(client,
                  id_,
                  subscription_id,
                  resource_group_name,
                  workspace_name,
                  properties=None,
                  system_data=None):
    return client.create_or_update(id=id_,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   properties=properties,
                                   system_data=system_data)


def ml_job_update(client,
                  id_,
                  subscription_id,
                  resource_group_name,
                  workspace_name,
                  properties=None,
                  system_data=None):
    return client.create_or_update(id=id_,
                                   subscription_id=subscription_id,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   properties=properties,
                                   system_data=system_data)


def ml_job_delete(client,
                  id_,
                  subscription_id,
                  resource_group_name,
                  workspace_name):
    return client.delete(id=id_,
                         subscription_id=subscription_id,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def ml_job_cancel(client,
                  id_,
                  subscription_id,
                  resource_group_name,
                  workspace_name):
    return client.cancel(id=id_,
                         subscription_id=subscription_id,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def ml_workspace_list(client,
                      resource_group_name=None,
                      skiptoken=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             skiptoken=skiptoken)
    return client.list_by_subscription(skiptoken=skiptoken)


def ml_workspace_show(client,
                      resource_group_name,
                      workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def ml_workspace_create(client,
                        resource_group_name,
                        workspace_name,
                        location=None,
                        tags=None,
                        sku=None,
                        identity_type=None,
                        identity_user_assigned_identities=None,
                        description=None,
                        friendly_name=None,
                        key_vault=None,
                        application_insights=None,
                        container_registry=None,
                        storage_account=None,
                        discovery_url=None,
                        hbi_workspace=None,
                        image_build_compute=None,
                        allow_public_access_when_behind_vnet=None,
                        shared_private_link_resources=None,
                        encryption_status=None,
                        encryption_key_vault_properties=None,
                        no_wait=False):
    if hbi_workspace is None:
        hbi_workspace = False
    if allow_public_access_when_behind_vnet is None:
        allow_public_access_when_behind_vnet = False
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities,
                       description=description,
                       friendly_name=friendly_name,
                       key_vault=key_vault,
                       application_insights=application_insights,
                       container_registry=container_registry,
                       storage_account=storage_account,
                       discovery_url=discovery_url,
                       hbi_workspace=hbi_workspace,
                       image_build_compute=image_build_compute,
                       allow_public_access_when_behind_vnet=allow_public_access_when_behind_vnet,
                       shared_private_link_resources=shared_private_link_resources,
                       status=encryption_status,
                       key_vault_properties=encryption_key_vault_properties)


def ml_workspace_update(client,
                        resource_group_name,
                        workspace_name,
                        tags=None,
                        sku=None,
                        description=None,
                        friendly_name=None):
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         tags=tags,
                         sku=sku,
                         description=description,
                         friendly_name=friendly_name)


def ml_workspace_delete(client,
                        resource_group_name,
                        workspace_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def ml_workspace_list_key(client,
                          resource_group_name,
                          workspace_name):
    return client.list_key(resource_group_name=resource_group_name,
                           workspace_name=workspace_name)


def ml_workspace_resync_key(client,
                            resource_group_name,
                            workspace_name):
    return client.resync_key(resource_group_name=resource_group_name,
                             workspace_name=workspace_name)


def ml_usage_list(client,
                  location):
    return client.list(location=location)


def ml_vm_size_list(client,
                    location):
    return client.list(location=location)


def ml_compute_quota_list(client,
                          location):
    return client.list(location=location)


def ml_compute_quota_update(client,
                            location,
                            value=None):
    return client.update(location=location,
                         value=value)


def ml_compute_list(client,
                    resource_group_name,
                    workspace_name,
                    skiptoken=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skiptoken=skiptoken)


def ml_compute_show(client,
                    resource_group_name,
                    workspace_name,
                    compute_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      compute_name=compute_name)


def ml_compute_aks_create(client,
                          resource_group_name,
                          workspace_name,
                          compute_name,
                          location=None,
                          tags=None,
                          sku=None,
                          identity_type=None,
                          identity_user_assigned_identities=None,
                          ak_s_compute_location=None,
                          ak_s_description=None,
                          ak_s_resource_id=None,
                          ak_s_properties=None,
                          no_wait=False):
    properties = {}
    properties['compute_type'] = 'Aks'
    properties['compute_location'] = ak_s_compute_location
    properties['description'] = ak_s_description
    properties['resource_id'] = ak_s_resource_id
    properties['properties'] = ak_s_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_aml_compute_create(client,
                                  resource_group_name,
                                  workspace_name,
                                  compute_name,
                                  location=None,
                                  tags=None,
                                  sku=None,
                                  identity_type=None,
                                  identity_user_assigned_identities=None,
                                  compute_location=None,
                                  description=None,
                                  resource_id=None,
                                  aml_compute_properties=None,
                                  no_wait=False):
    properties = {}
    properties['compute_type'] = 'AmlCompute'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    properties['properties'] = aml_compute_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_data_factory_create(client,
                                   resource_group_name,
                                   workspace_name,
                                   compute_name,
                                   location=None,
                                   tags=None,
                                   sku=None,
                                   identity_type=None,
                                   identity_user_assigned_identities=None,
                                   compute_location=None,
                                   description=None,
                                   resource_id=None,
                                   no_wait=False):
    properties = {}
    properties['compute_type'] = 'DataFactory'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_data_lake_analytics_create(client,
                                          resource_group_name,
                                          workspace_name,
                                          compute_name,
                                          location=None,
                                          tags=None,
                                          sku=None,
                                          identity_type=None,
                                          identity_user_assigned_identities=None,
                                          compute_location=None,
                                          description=None,
                                          resource_id=None,
                                          data_lake_store_account_name=None,
                                          no_wait=False):
    properties = {}
    properties['compute_type'] = 'DataLakeAnalytics'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    properties['data_lake_store_account_name'] = data_lake_store_account_name
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_databricks_create(client,
                                 resource_group_name,
                                 workspace_name,
                                 compute_name,
                                 location=None,
                                 tags=None,
                                 sku=None,
                                 identity_type=None,
                                 identity_user_assigned_identities=None,
                                 compute_location=None,
                                 description=None,
                                 resource_id=None,
                                 databricks_access_token=None,
                                 no_wait=False):
    properties = {}
    properties['compute_type'] = 'Databricks'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    properties['databricks_access_token'] = databricks_access_token
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_hd_insight_create(client,
                                 resource_group_name,
                                 workspace_name,
                                 compute_name,
                                 location=None,
                                 tags=None,
                                 sku=None,
                                 identity_type=None,
                                 identity_user_assigned_identities=None,
                                 compute_location=None,
                                 description=None,
                                 resource_id=None,
                                 ssh_port=None,
                                 address=None,
                                 administrator_account=None,
                                 no_wait=False):
    properties = {}
    properties['compute_type'] = 'HdInsight'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    properties['ssh_port'] = ssh_port
    properties['address'] = address
    properties['administrator_account'] = administrator_account
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_virtual_machine_create(client,
                                      resource_group_name,
                                      workspace_name,
                                      compute_name,
                                      location=None,
                                      tags=None,
                                      sku=None,
                                      identity_type=None,
                                      identity_user_assigned_identities=None,
                                      compute_location=None,
                                      description=None,
                                      resource_id=None,
                                      virtual_machine_size=None,
                                      ssh_port=None,
                                      address=None,
                                      administrator_account=None,
                                      no_wait=False):
    properties = {}
    properties['compute_type'] = 'VirtualMachine'
    properties['compute_location'] = compute_location
    properties['description'] = description
    properties['resource_id'] = resource_id
    properties['virtual_machine_size'] = virtual_machine_size
    properties['ssh_port'] = ssh_port
    properties['address'] = address
    properties['administrator_account'] = administrator_account
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=type,
                       user_assigned_identities=user_assigned_identities,
                       properties=properties)


def ml_compute_update(client,
                      resource_group_name,
                      workspace_name,
                      compute_name,
                      scale_settings=None,
                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       scale_settings=scale_settings)


def ml_compute_delete(client,
                      resource_group_name,
                      workspace_name,
                      compute_name,
                      underlying_resource_action,
                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       underlying_resource_action=underlying_resource_action)


def ml_compute_list_key(client,
                        resource_group_name,
                        workspace_name,
                        compute_name):
    return client.list_key(resource_group_name=resource_group_name,
                           workspace_name=workspace_name,
                           compute_name=compute_name)


def ml_compute_list_node(client,
                         resource_group_name,
                         workspace_name,
                         compute_name):
    return client.list_node(resource_group_name=resource_group_name,
                            workspace_name=workspace_name,
                            compute_name=compute_name)


def ml_sku_list(client):
    return client.list()
