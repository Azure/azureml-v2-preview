# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_ml.generated._client_factory import cf_batch_endpoint
    ml_batch_endpoint = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._batch_endpoint_operations#BatchEndp'
        'ointOperations.{}',
        client_factory=cf_batch_endpoint)
    with self.command_group('ml endpoint', ml_batch_endpoint, client_factory=cf_batch_endpoint,
                            is_experimental=True) as g:
        g.custom_command('list', 'ml_endpoint_list')
        g.custom_show_command('show', 'ml_endpoint_show')
        g.custom_command('create', 'ml_endpoint_create')
        g.custom_command('update', 'ml_endpoint_update')
        g.custom_command('delete', 'ml_endpoint_delete', confirmation=True)
        g.custom_command('list-key', 'ml_endpoint_list_key')

    from azext_ml.generated._client_factory import cf_datastore
    ml_datastore = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._datastore_operations#DatastoreOpera'
        'tions.{}',
        client_factory=cf_datastore)
    with self.command_group('ml datastore', ml_datastore, client_factory=cf_datastore, is_experimental=True) as g:
        g.custom_command('list', 'ml_datastore_list')
        g.custom_show_command('show', 'ml_datastore_show')
        g.custom_command('create', 'ml_datastore_create')
        g.custom_command('update', 'ml_datastore_update')
        g.custom_command('delete', 'ml_datastore_delete', confirmation=True)
        g.custom_command('list-secret', 'ml_datastore_list_secret')

    from azext_ml.generated._client_factory import cf_job
    ml_job = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._job_operations#JobOperations.{}',
        client_factory=cf_job)
    with self.command_group('ml job', ml_job, client_factory=cf_job, is_experimental=True) as g:
        g.custom_command('list', 'ml_job_list')
        g.custom_show_command('show', 'ml_job_show')
        g.custom_command('create', 'ml_job_create')
        g.custom_command('update', 'ml_job_update')
        g.custom_command('delete', 'ml_job_delete', confirmation=True)
        g.custom_command('cancel', 'ml_job_cancel')

    from azext_ml.generated._client_factory import cf_workspace
    ml_workspace = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._workspace_operations#WorkspaceOpera'
        'tions.{}',
        client_factory=cf_workspace)
    with self.command_group('ml workspace', ml_workspace, client_factory=cf_workspace, is_experimental=True) as g:
        g.custom_command('list', 'ml_workspace_list')
        g.custom_show_command('show', 'ml_workspace_show')
        g.custom_command('create', 'ml_workspace_create', supports_no_wait=True)
        g.custom_command('update', 'ml_workspace_update')
        g.custom_command('delete', 'ml_workspace_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-key', 'ml_workspace_list_key')
        g.custom_command('resync-key', 'ml_workspace_resync_key')
        g.custom_wait_command('wait', 'ml_workspace_show')

    from azext_ml.generated._client_factory import cf_usage
    ml_usage = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._usage_operations#UsageOperations.{}'
        '',
        client_factory=cf_usage)
    with self.command_group('ml usage', ml_usage, client_factory=cf_usage, is_experimental=True) as g:
        g.custom_command('list', 'ml_usage_list')

    from azext_ml.generated._client_factory import cf_virtual_machine_size
    ml_virtual_machine_size = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._virtual_machine_size_operations#Vir'
        'tualMachineSizeOperations.{}',
        client_factory=cf_virtual_machine_size)
    with self.command_group('ml vm-size', ml_virtual_machine_size, client_factory=cf_virtual_machine_size,
                            is_experimental=True) as g:
        g.custom_command('list', 'ml_vm_size_list')

    from azext_ml.generated._client_factory import cf_quota
    ml_quota = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._quota_operations#QuotaOperations.{}'
        '',
        client_factory=cf_quota)
    with self.command_group('ml compute quota', ml_quota, client_factory=cf_quota) as g:
        g.custom_command('list', 'ml_compute_quota_list')
        g.custom_command('update', 'ml_compute_quota_update')

    from azext_ml.generated._client_factory import cf_machine_learning_compute
    ml_machine_learning_compute = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._machine_learning_compute_operations'
        '#MachineLearningComputeOperations.{}',
        client_factory=cf_machine_learning_compute)
    with self.command_group('ml compute', ml_machine_learning_compute, client_factory=cf_machine_learning_compute,
                            is_experimental=True) as g:
        g.custom_command('list', 'ml_compute_list')
        g.custom_show_command('show', 'ml_compute_show')
        g.custom_command('aks create', 'ml_compute_aks_create', supports_no_wait=True)
        g.custom_command('aml-compute create', 'ml_compute_aml_compute_create', supports_no_wait=True)
        g.custom_command('data-factory create', 'ml_compute_data_factory_create', supports_no_wait=True)
        g.custom_command('data-lake-analytics create', 'ml_compute_data_lake_analytics_create', supports_no_wait=True)
        g.custom_command('databricks create', 'ml_compute_databricks_create', supports_no_wait=True)
        g.custom_command('hd-insight create', 'ml_compute_hd_insight_create', supports_no_wait=True)
        g.custom_command('virtual-machine create', 'ml_compute_virtual_machine_create', supports_no_wait=True)
        g.custom_command('update', 'ml_compute_update', supports_no_wait=True)
        g.custom_command('delete', 'ml_compute_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-key', 'ml_compute_list_key')
        g.custom_command('list-node', 'ml_compute_list_node')
        g.custom_wait_command('wait', 'ml_compute_show')

    from azext_ml.generated._client_factory import cf_sku
    ml_sku = CliCommandType(
        operations_tmpl='azext_ml.vendored_sdks.machinelearningservices.operations._sku_operations#SkuOperations.{}',
        client_factory=cf_sku)
    with self.command_group('ml sku', ml_sku, client_factory=cf_sku, is_experimental=True) as g:
        g.custom_command('list', 'ml_sku_list')
