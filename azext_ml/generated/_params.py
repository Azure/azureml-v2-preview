# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_ml.action import (
    AddSystemData,
    AddBatchendpointsProperties,
    AddTrafficRules,
    AddKeys,
    AddLinkedInfo,
    AddDatastoresProperties,
    AddSku,
    AddSharedPrivateLinkResources,
    AddEncryptionKeyVaultProperties,
    AddValue,
    AddAdministratorAccount,
    AddScaleSettings
)


def load_arguments(self, _):

    with self.argument_context('ml endpoint list') as c:
        c.argument('skip_token', type=str, help='Continuation token for pagination.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')

    with self.argument_context('ml endpoint show') as c:
        c.argument('name', type=str, help='Name for the Batch Endpoint.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml endpoint create') as c:
        c.argument('name', type=str, help='Name for the Batch inference endpoint.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')
        c.argument('description', type=str, help='Description of the inference endpoint.')
        c.argument('properties', action=AddBatchendpointsProperties, nargs='*', help='Property dictionary. Properties '
                   'can be added, but not removed or altered. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('traffic_rules', action=AddTrafficRules, nargs='*', help='Traffic rules on how the traffic will be '
                   'routed across deployments. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('compute_configuration', type=validate_file_or_dict, help='Reference to compute configuration. '
                   'Expected value: json-string/@json-file.')
        c.argument('auth_mode', arg_type=get_enum_type(['AMLToken', 'Key']), help='Inference endpoint authentication '
                   'mode type')
        c.argument('keys', action=AddKeys, nargs='*', help='')

    with self.argument_context('ml endpoint update') as c:
        c.argument('name', type=str, help='Name for the Batch inference endpoint.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')
        c.argument('description', type=str, help='Description of the inference endpoint.')
        c.argument('properties', action=AddBatchendpointsProperties, nargs='*', help='Property dictionary. Properties '
                   'can be added, but not removed or altered. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('traffic_rules', action=AddTrafficRules, nargs='*', help='Traffic rules on how the traffic will be '
                   'routed across deployments. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('compute_configuration', type=validate_file_or_dict, help='Reference to compute configuration. '
                   'Expected value: json-string/@json-file.')
        c.argument('auth_mode', arg_type=get_enum_type(['AMLToken', 'Key']), help='Inference endpoint authentication '
                   'mode type')
        c.argument('keys', action=AddKeys, nargs='*', help='')

    with self.argument_context('ml endpoint delete') as c:
        c.argument('name', type=str, help='Inference Endpoint name.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml endpoint list-key') as c:
        c.argument('name', type=str, help='Inference Endpoint name.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')

    with self.argument_context('ml datastore list') as c:
        c.argument('skip_token', type=str, help='Opaque token to retrieve the next page of results from a previous '
                   'query.')
        c.argument('count', type=int, help='Maximum number of results to return.')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Filter down to the workspace default '
                   'datastore.')
        c.argument('names', nargs='*', help='Names of datastores to return.')
        c.argument('search_text', type=str, help='Text to search for in the datastore names.')
        c.argument('order_by', type=str, help='Order by property (createdtime | modifiedtime | name).')
        c.argument('order_by_asc', arg_type=get_three_state_flag(), help='Order by property in ascending order.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')

    with self.argument_context('ml datastore show') as c:
        c.argument('name', type=str, help='Datastore name.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml datastore create') as c:
        c.argument('name', type=str, help='Datastore name.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')
        c.argument('contents', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Whether this datastore is the default for the '
                   'workspace.')
        c.argument('linked_info', action=AddLinkedInfo, nargs='*', help='')
        c.argument('properties', action=AddDatastoresProperties, nargs='*', help='Dictionary of :code:`<string>` '
                   'Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('description', type=str, help='The asset description text.')
        c.argument('tags', tags_type)

    with self.argument_context('ml datastore update') as c:
        c.argument('name', type=str, help='Datastore name.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')
        c.argument('contents', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('is_default', arg_type=get_three_state_flag(), help='Whether this datastore is the default for the '
                   'workspace.')
        c.argument('linked_info', action=AddLinkedInfo, nargs='*', help='')
        c.argument('properties', action=AddDatastoresProperties, nargs='*', help='Dictionary of :code:`<string>` '
                   'Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('description', type=str, help='The asset description text.')
        c.argument('tags', tags_type)

    with self.argument_context('ml datastore delete') as c:
        c.argument('name', type=str, help='Datastore name.', id_part='child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml datastore list-secret') as c:
        c.argument('name', type=str, help='Datastore name.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')

    with self.argument_context('ml job list') as c:
        c.argument('skip_token', type=str, help='Continuation token for pagination.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')

    with self.argument_context('ml job show') as c:
        c.argument('id_', options_list=['--id'], type=str, help='The name and identifier for the Job.', id_part=''
                   'child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml job create') as c:
        c.argument('id_', options_list=['--id'], type=str, help='The name and identifier for the Job.')
        c.argument('subscription_id', type=str, help='')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', configured_default='workspace')
        c.argument('properties', type=validate_file_or_dict, help='Additional attributes of the entity. Expected '
                   'value: json-string/@json-file.')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')

    with self.argument_context('ml job update') as c:
        c.argument('id_', options_list=['--id'], type=str, help='The name and identifier for the Job.', id_part=''
                   'child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')
        c.argument('properties', type=validate_file_or_dict, help='Additional attributes of the entity. Expected '
                   'value: json-string/@json-file.')
        c.argument('system_data', action=AddSystemData, nargs='*', help='Azure Resource Manager resource Envelope')

    with self.argument_context('ml job delete') as c:
        c.argument('id_', options_list=['--id'], type=str, help='The name and identifier for the Job.', id_part=''
                   'child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml job cancel') as c:
        c.argument('id_', options_list=['--id'], type=str, help='The name and identifier for the Job.', id_part=''
                   'child_name_1')
        c.argument('subscription_id', type=str, help='', id_part='subscription')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='', id_part='name', configured_default='workspace')

    with self.argument_context('ml workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skiptoken', type=str, help='Continuation token for pagination.')

    with self.argument_context('ml workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name', configured_default='workspace')

    with self.argument_context('ml workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', configured_default='workspace')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('description', type=str, help='The description of this workspace.')
        c.argument('friendly_name', type=str, help='The friendly name for this workspace. This name in mutable')
        c.argument('key_vault', type=str, help='ARM id of the key vault associated with this workspace. This cannot be '
                   'changed once the workspace has been created')
        c.argument('application_insights', type=str, help='ARM id of the application insights associated with this '
                   'workspace. This cannot be changed once the workspace has been created')
        c.argument('container_registry', type=str, help='ARM id of the container registry associated with this '
                   'workspace. This cannot be changed once the workspace has been created')
        c.argument('storage_account', type=str, help='ARM id of the storage account associated with this workspace. '
                   'This cannot be changed once the workspace has been created')
        c.argument('discovery_url', type=str, help='Url for the discovery service to identify regional endpoints for '
                   'machine learning experimentation services')
        c.argument('hbi_workspace', arg_type=get_three_state_flag(), help='The flag to signal HBI data in the '
                   'workspace and reduce diagnostic data collected by the service')
        c.argument('image_build_compute', type=str, help='The compute name for image build')
        c.argument('allow_public_access_when_behind_vnet', arg_type=get_three_state_flag(), help='The flag to indicate '
                   'whether to allow public access when behind VNet.')
        c.argument('shared_private_link_resources', action=AddSharedPrivateLinkResources, nargs='*', help='The list of '
                   'shared private link resources in this workspace.')
        c.argument('encryption_status', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Indicates whether or '
                   'not the encryption is enabled for the workspace.')
        c.argument('encryption_key_vault_properties', action=AddEncryptionKeyVaultProperties, nargs='*', help=''
                   'Customer Key vault properties.')

    with self.argument_context('ml workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name', configured_default='workspace')
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('description', type=str, help='The description of this workspace.')
        c.argument('friendly_name', type=str, help='The friendly name for this workspace.')

    with self.argument_context('ml workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name', configured_default='workspace')

    with self.argument_context('ml workspace list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', configured_default='workspace')

    with self.argument_context('ml workspace resync-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name', configured_default='workspace')

    with self.argument_context('ml workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name', configured_default='workspace')

    with self.argument_context('ml usage list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('ml vm-size list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('ml compute quota list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('ml compute quota update') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('value', action=AddValue, nargs='*', help='The list for update quota.')

    with self.argument_context('ml compute list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('skiptoken', type=str, help='Continuation token for pagination.')

    with self.argument_context('ml compute show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name',
                   configured_default='workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('ml compute aks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('ak_s_compute_location', type=str, help='Location for the underlying compute')
        c.argument('ak_s_description', type=str, help='The description of the Machine Learning compute.')
        c.argument('ak_s_resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('ak_s_properties', type=validate_file_or_dict, help='AKS properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('ml compute aml-compute create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('aml_compute_properties', type=validate_file_or_dict, help='AML Compute properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('ml compute data-factory create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')

    with self.argument_context('ml compute data-lake-analytics create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('data_lake_store_account_name', type=str, help='DataLake Store Account Name')

    with self.argument_context('ml compute databricks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('databricks_access_token', type=str, help='Databricks access token')

    with self.argument_context('ml compute hd-insight create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('ssh_port', type=int, help='Port open for ssh connections on the master node of the cluster.')
        c.argument('address', type=str, help='Public IP address of the master node of the cluster.')
        c.argument('administrator_account', action=AddAdministratorAccount, nargs='*', help='Admin credentials for '
                   'master node of the cluster')

    with self.argument_context('ml compute virtual-machine create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'SystemAssigned,UserAssigned', ''
                                                            'UserAssigned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('virtual_machine_size', type=str, help='Virtual Machine size')
        c.argument('ssh_port', type=int, help='Port open for ssh connections.')
        c.argument('address', type=str, help='Public IP address of the virtual machine.')
        c.argument('administrator_account', action=AddAdministratorAccount, nargs='*', help='Admin credentials for '
                   'virtual machine')

    with self.argument_context('ml compute update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name',
                   configured_default='workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')
        c.argument('scale_settings', action=AddScaleSettings, nargs='*', help='Desired scale settings for the '
                   'amlCompute.')

    with self.argument_context('ml compute delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name',
                   configured_default='workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')
        c.argument('underlying_resource_action', arg_type=get_enum_type(['Delete', 'Detach']), help='Delete the '
                   'underlying compute if \'Delete\', or detach the underlying compute from workspace if \'Detach\'.')

    with self.argument_context('ml compute list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')

    with self.argument_context('ml compute list-node') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', configured_default=''
                   'workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')

    with self.argument_context('ml compute wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name',
                   configured_default='workspace')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')
